# Source: nginx-ingress-controller/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-nginx-ingress-controller
  namespace: "kube-system"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-7.6.17
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
---
# Source: nginx-ingress-controller/templates/default-backend-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-nginx-ingress-controller-default-backend
  namespace: "kube-system"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-7.6.17
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: default-backend
data:
  defaultBackend.conf: |-
    location /healthz {
      return 200;
    }

    location / {
      return 404;
    }
---
# Source: nginx-ingress-controller/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nginx-nginx-ingress-controller
  namespace: "kube-system"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-7.6.17
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - "networking.k8s.io"  # k8s 1.14+
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
---
# Source: nginx-ingress-controller/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nginx-nginx-ingress-controller
  namespace: "kube-system"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-7.6.17
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-nginx-ingress-controller
subjects:
  - kind: ServiceAccount
    name: nginx-nginx-ingress-controller
    namespace: "kube-system"
---
# Source: nginx-ingress-controller/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nginx-nginx-ingress-controller
  namespace: "kube-system"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-7.6.17
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: nginx-ingress-controller/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nginx-nginx-ingress-controller
  namespace: "kube-system"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-7.6.17
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-nginx-ingress-controller
subjects:
  - kind: ServiceAccount
    name: nginx-nginx-ingress-controller
    namespace: "kube-system"
---
# Source: nginx-ingress-controller/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-nginx-ingress-controller
  namespace: "kube-system"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-7.6.17
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/component: controller
---
# Source: nginx-ingress-controller/templates/default-backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-nginx-ingress-controller-default-backend
  namespace: "kube-system"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-7.6.17
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: default-backend
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/component: default-backend
---
# Source: nginx-ingress-controller/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-nginx-ingress-controller
  namespace: "kube-system"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-7.6.17
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/instance: nginx
      app.kubernetes.io/component: controller
  replicas: 1
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-ingress-controller
        helm.sh/chart: nginx-ingress-controller-7.6.17
        app.kubernetes.io/instance: nginx
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: controller
    spec:

      dnsPolicy: ClusterFirst
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: nginx-ingress-controller
                    app.kubernetes.io/instance: nginx
                    app.kubernetes.io/component: controller
                namespaces:
                  - "kube-system"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      hostNetwork: false
      serviceAccountName: nginx-nginx-ingress-controller
      terminationGracePeriodSeconds: 60
      containers:
        - name: controller
          image: docker.io/bitnami/nginx-ingress-controller:0.48.1-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          # yamllint disable rule:indentation
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          # yamllint enable rule:indentation
          args:
            - /nginx-ingress-controller
            - --default-backend-service=kube-system/nginx-nginx-ingress-controller-default-backend
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx
            - --configmap=kube-system/nginx-nginx-ingress-controller
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          resources:
            limits: {}
            requests: {}
---
# Source: nginx-ingress-controller/templates/default-backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-nginx-ingress-controller-default-backend
  namespace: "kube-system"
  labels:
    app.kubernetes.io/name: nginx-ingress-controller
    helm.sh/chart: nginx-ingress-controller-7.6.17
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: default-backend
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/instance: nginx
      app.kubernetes.io/component: default-backend
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-ingress-controller
        helm.sh/chart: nginx-ingress-controller-7.6.17
        app.kubernetes.io/instance: nginx
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: default-backend
    spec:

      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: nginx-ingress-controller
                    app.kubernetes.io/instance: nginx
                    app.kubernetes.io/component: default-backend
                namespaces:
                  - "kube-system"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      serviceAccountName: nginx-nginx-ingress-controller
      terminationGracePeriodSeconds: 60
      containers:
        - name: default-backend
          image: docker.io/bitnami/nginx:1.21.1-debian-10-r7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          args:
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /opt/bitnami/nginx/conf/bitnami/
              readOnly: true
      volumes:
        - name: nginx-config-volume
          configMap:
            name: nginx-nginx-ingress-controller-default-backend
            items:
              - key: defaultBackend.conf
                path: defaultBackend.conf